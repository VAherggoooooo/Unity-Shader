Shader "Hidden/Post_VolumeCloud"
{
    SubShader
    {
        Cull Off ZWrite Off ZTest Always
        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"
            #include ".\Volume.cginc"
            #include "Lighting.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 pos : SV_POSITION;
            };

            sampler2D _MainTex, _CameraDepthTexture;
            float _RayStep, _StepCount;            
            float3 _BoxMin, _BoxMax;
            

            v2f vert (appdata v)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }
            
            fixed4 frag (v2f i) : SV_Target
            {
                //depth 
                float d = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, i.uv);
                float4 wPos = GetWorldPos(d, i.uv);
                //view dir 
                float3 vDir = normalize(_WorldSpaceCameraPos.xyz - wPos.xyz);
                //marching ray 
                Ray marchingRay = SetRay(_WorldSpaceCameraPos.xyz, -vDir, _RayStep, _StepCount);
                //bounding box 
                BoundBox box = SetBox(_BoxMin, _BoxMax);
                //blocker distance 
                float blockerDis = distance(_WorldSpaceCameraPos.xyz, wPos.xyz);
                //volume cloud
                float cloud = GetRayMarchingCloud(marchingRay, box, blockerDis);
                //light data
                SetLightingData(_WorldSpaceLightPos0.xyz, _LightColor0.xyz);
                //screen main tex 
                float4 mainTex = tex2D(_MainTex, i.uv);

                //final color 
                float4 finalCol = mainTex + float4(cloud.xxx, 1);
                return finalCol;
            }
            ENDCG
        }
    }
}
