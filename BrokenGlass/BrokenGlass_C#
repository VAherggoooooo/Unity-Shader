using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BrokenGlass : PostProcessBase
{
    //玻璃
    public Vector4 GlassTex = new Vector4(0.7f, 0.7f, -0.01f, 0.17f);
    [Range(0.0f, 15.0f)] public float glassIntensity = 13.3f;
    [Range(-8.0f, 8.0f)] public float normalIntensity = 5.8f;


    //高斯模糊
    [Range(0, 5)] public int SampleTime = 1;//采样次数
    [Range(0.1f, 5.0f)] public float offset = 1;//采样uv偏移
    private void OnRenderImage(RenderTexture source, RenderTexture destination)
    {
        if (material)
        {
            material.SetFloat("_UVOffset", offset);

            material.SetVector("_GlassTex_ST", GlassTex);
            material.SetFloat("_GlassIntensity", glassIntensity);
            material.SetFloat("_NormalIntensity", normalIntensity);






            //扣出玻璃内的画面
            RenderTexture glass_in =
                RenderTexture.GetTemporary(Screen.width, Screen.height);
            Graphics.Blit(source, glass_in, material, 0);

            material.SetTexture("_GlassIn", glass_in);

            //玻璃颜色
            RenderTexture glass_col =
                RenderTexture.GetTemporary(Screen.width, Screen.height);
            Graphics.Blit(source, glass_col, material, 1);

            material.SetTexture("_GlassCol", glass_col);







            //高斯模糊
            int rtW = Screen.width;
            int rtH = Screen.height;
            RenderTexture rt0 =
                RenderTexture.GetTemporary(rtW, rtH);

            Graphics.Blit(source, rt0);
            //降采样
            for (int i = 0; i < SampleTime; i++)//高斯模糊结果输出到rt0
            {
                RenderTexture rt1 = RenderTexture.GetTemporary(rtW, rtH);

                Graphics.Blit(rt0, rt1, material, 2);

                RenderTexture.ReleaseTemporary(rt0);

                rt0 = rt1;

                rt1 = RenderTexture.GetTemporary(rtW, rtH);
                Graphics.Blit(rt0, rt1, material, 3);

                RenderTexture.ReleaseTemporary(rt0);

                rt0 = rt1;

                rtW /= 2;
                rtH /= 2;
            }//for
			//升采样
            for (int i = 0; i < SampleTime; i++)//高斯模糊结果输出到rt0
            {


                RenderTexture rt1 = RenderTexture.GetTemporary(rtW, rtH);

                Graphics.Blit(rt0, rt1, material, 2);

                RenderTexture.ReleaseTemporary(rt0);

                rt0 = rt1;

                rt1 = RenderTexture.GetTemporary(rtW, rtH);
                Graphics.Blit(rt0, rt1, material, 3);

                RenderTexture.ReleaseTemporary(rt0);

                rt0 = rt1;

                rtW *= 2;
                rtH *= 2;
            }//for



            //保存高斯模糊结果
            material.SetTexture("_GlassOut", rt0);






            //扣掉玻璃内的画面
            RenderTexture glass_out =
                RenderTexture.GetTemporary(Screen.width, Screen.height);

            Graphics.Blit(rt0, glass_out, material, 4);
            material.SetTexture("_BlurTex", glass_out);







            //final color
            Graphics.Blit(source, destination, material, 5);
            //release
            RenderTexture.ReleaseTemporary(glass_in);
            RenderTexture.ReleaseTemporary(glass_col);
            RenderTexture.ReleaseTemporary(glass_out);
            RenderTexture.ReleaseTemporary(rt0);

        }//if
        else
        {
            Graphics.Blit(source, destination);
        }//else
    }

}
