Shader "Hidden/BrokenGlass"
{
    Properties
    {
        [HideInInspector]_MainTex ("Texture", 2D) = "white" {}

        _GlassTex ("Glass Tex", 2D) = "black" {}//玻璃纹理
        _GlassIntensity ("Glass Intensity", Range(0, 15)) = 1//玻璃明显度

        [NoScaleOffset]_GlassMask ("Glass Mask", 2D) = "white" {}//玻璃内遮罩

        [NoScaleOffset]_GlassNormal ("Glass Normal", 2D) = "bump" {}//玻璃纹理法线
        _NormalIntensity ("Normal Intensity", Range(-8.0, 8.0)) = 0//法线影响强度

        //高斯模糊
		_UVOffset ("UV Offset", Range(0.1, 5)) = 1//采样uv偏移

    }
    SubShader
    {
         CGINCLUDE 

         #include "UnityCG.cginc"

         sampler2D _MainTex;                  
         float4 _MainTex_TexelSize;//图像一个单位的大小, 在纹理后面加_TexelSieze
         //x -> 1/width   y -> 1/height   z -> width   w ->height

        
        	
         sampler2D _GlassTex;
         float4 _GlassTex_ST;
         float _GlassIntensity;

         sampler2D _GlassMask;

         sampler2D _GlassNormal;
         float _NormalIntensity;

         float4 _UVOffset;


         sampler2D _GlassIn;//玻璃内的颜色
         sampler2D _GlassCol;//玻璃内的颜色
         sampler2D _GlassOut;//玻璃外的颜色,模糊前
         sampler2D _BlurTex;//玻璃外的颜色,模糊后

         
         // -------- glass Mask --------
         float4 frag_GlassMask(v2f_img i) : SV_Target 
         {
            // ---- glass texture uv ----
            float2 glass_uv = i.uv * _GlassTex_ST.xy + _GlassTex_ST.zw;
            //防止正方形贴图拉伸
            //把x方向拉长来比配x步进比y步进长的特性
            glass_uv.x *= (_ScreenParams.x / _ScreenParams.y);

            float glass_mask = saturate(tex2D(_GlassMask, glass_uv).r);
            glass_mask = step(0.8, glass_mask);


            //画面纹理
            // ---- glass normal -----
            float4 glass_tex = tex2D(_GlassTex, glass_uv) * _GlassIntensity;

             float3 glass_normal = UnpackNormal(tex2D(_GlassNormal, glass_uv));

             //只在玻璃纹理处影响玻璃法线扰动
             float2 offset_range = 
                lerp(float2(0.0, 0.0), 
                    glass_normal.xy * _NormalIntensity, glass_tex);

             float4 col = tex2D(_MainTex, i.uv + offset_range) * glass_mask;

            return col;
         }

         // -------- glass Out --------
         float4 frag_GlassOut(v2f_img i) : SV_Target 
         {
            // ---- glass texture uv ----
            float2 glass_uv = i.uv * _GlassTex_ST.xy + _GlassTex_ST.zw;
            //防止正方形贴图拉伸
            //把x方向拉长来比配x步进比y步进长的特性
            glass_uv.x *= (_ScreenParams.x / _ScreenParams.y);

            //玻璃外遮罩
            float glass_mask = saturate(tex2D(_GlassMask, glass_uv).r);
            glass_mask = step(0.8, glass_mask);
            glass_mask = 1 - glass_mask;

            float4 blur_tex = tex2D(_GlassOut, i.uv) * glass_mask;

            return blur_tex;
         }

         // -------- glass color --------
         float4 frag_GlassColor (v2f_img i) : SV_Target
         {
             
             // ---- glass color ----
             float2 glass_uv = i.uv * _GlassTex_ST.xy + _GlassTex_ST.zw;
             //防止正方形贴图拉伸
             //把x方向拉长来比配x步进比y步进长的特性
             glass_uv.x *= (_ScreenParams.x / _ScreenParams.y);

             float4 glass_tex = tex2D(_GlassTex, glass_uv) * _GlassIntensity;
             
             return float4(1, 1, 1, 1) * glass_tex;
         }

         // -------- 输出最后颜色 --------
         float4 frag_finalCol (v2f_img i) : SV_Target 
         {
            float4 glass_mask = tex2D(_GlassIn, i.uv);
            float4 glass_col = tex2D(_GlassCol, i.uv);
            float4 glass_out = tex2D(_GlassOut, i.uv);

            float4 final_col = glass_mask + glass_col + glass_out;
            return final_col;            
         }










        // ----------------------------
        // ---------- 高斯模糊 ----------
        // ----------------------------
        struct v2f
        {                
            float4 pos : SV_POSITION;
            float2 uvs[5] : TEXCOORD0;//存储卷积用的uv
        };
        
        
        // -------- 横向卷积的顶点shader --------
        v2f vert_H (appdata_img v)//水平方向的高斯卷积uv偏移
        {
            v2f o;
            o.pos = UnityObjectToClipPos(v.vertex);
        
            o.uvs[0] = v.texcoord + _MainTex_TexelSize.xy * float2(-2, 0) * _UVOffset;
            o.uvs[1] = v.texcoord + _MainTex_TexelSize.xy * float2(-1, 0) * _UVOffset;
            o.uvs[2] = v.texcoord;
            o.uvs[3] = v.texcoord + _MainTex_TexelSize.xy * float2(1, 0) * _UVOffset;
            o.uvs[4] = v.texcoord + _MainTex_TexelSize.xy * float2(2, 0) * _UVOffset;
        
            return o;
        }
        
        // -------- 纵向卷积的顶点shader --------
        v2f vert_V (appdata_img v)//数值方向的高斯卷积uv偏移
        {
            v2f o;
            o.pos = UnityObjectToClipPos(v.vertex);
        
            o.uvs[0] = v.texcoord + _MainTex_TexelSize.xy * float2(0, -2) * _UVOffset;
            o.uvs[1] = v.texcoord + _MainTex_TexelSize.xy * float2(0, -1) * _UVOffset;
            o.uvs[2] = v.texcoord;
            o.uvs[3] = v.texcoord + _MainTex_TexelSize.xy * float2(0, 1) * _UVOffset;
            o.uvs[4] = v.texcoord + _MainTex_TexelSize.xy * float2(0, 2) * _UVOffset;
        
            return o;
        }
        
        // -------- 片元shader --------
        
        float4 frag_GS (v2f i) : SV_Target
        {
            // ----         高斯卷积权重分布         ----
            // ---- 0.0545 0.2442 0.4026 0.2442 0.0545 ----
            float weight[3] = {0.4026, 0.2442, 0.0545};
        
            float4 col = tex2D(_MainTex, i.uvs[2]) * weight[0];//卷积中间块的颜色
        
            for (int it = 0; it < 2; it++)
            {
                //一次采样将两边都采样
                col += tex2D(_MainTex, i.uvs[it]) * weight[2 - it];
                col += tex2D(_MainTex, i.uvs[4 - it]) * weight[2 - it];
            }//for
        
            return float4(col.xyz, 1.0);
        }

         ENDCG 




        // No culling or depth
        Cull Off ZWrite Off ZTest Always


        Pass // 0
        {
            Name "Glass Mask"
            CGPROGRAM
            #pragma vertex vert_img
            #pragma fragment frag_GlassMask   
            ENDCG
        }
        Pass // 1
        {
            Name "Glass Color"
            CGPROGRAM
            #pragma vertex vert_img
            #pragma fragment frag_GlassColor   
            ENDCG
        }

        Pass // 2
        {
            Name "Blur H"
            CGPROGRAM
            #pragma vertex vert_H
            #pragma fragment frag_GS  
            ENDCG
        }
        Pass // 3
        {
            Name "Blur V"
            CGPROGRAM
            #pragma vertex vert_V
            #pragma fragment frag_GS  
            ENDCG
        }

        Pass // 4
        {
            Name "Glass Out"
            CGPROGRAM
            #pragma vertex vert_img
            #pragma fragment frag_GlassOut   
            ENDCG
        }

        Pass // 5
        {
            Name "Final Color"
            CGPROGRAM
            #pragma vertex vert_img
            #pragma fragment frag_finalCol   
            ENDCG
        }
    }
}
